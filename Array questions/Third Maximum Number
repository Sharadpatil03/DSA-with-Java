Example 1:

Input: nums = [3,2,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2.
The third distinct maximum is 1.
Example 2:

Input: nums = [1,2]
Output: 2
Explanation:
The first distinct maximum is 2.
The second distinct maximum is 1.
The third distinct maximum does not exist, so the maximum (2) is returned instead.
Example 3:

Input: nums = [2,2,3,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2 (both 2's are counted together since they have the same value).
The third distinct maximum is 1.
 


class Solution {
    public int thirdMax(int[] nums) {
        
        ///The Optimal solution here is to use the three variable

        Long firstM=null, secondM=null, thirdM=null;

        for(int i=0; i<nums.length; i++){
            long val=(long)nums[i];

            // skip the vaue is already used , for maintianing only unique like( 2,2 we can't assign at secondM and thirdM)

            if((firstM!=null && val==firstM) ||
               (secondM!=null &&val==secondM) ||
               (thirdM!=null&& val==thirdM)){
                continue;
            }

            if (firstM == null || val > firstM) {
                thirdM = secondM;
                secondM = firstM;
                firstM = val;
            } else if (secondM == null || val > secondM) {
                thirdM = secondM;
                secondM = val;
            } else if (thirdM == null || val > thirdM) {
                thirdM = val;
            }
        }

        if (thirdM == null) {
            return firstM.intValue();
        } else {
            return thirdM.intValue();
        }

    }
}
