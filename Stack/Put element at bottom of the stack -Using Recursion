import java.util.*;

public class Main {

   //Push element at bottom of the Stack using recursion
   //What’s the trick?
// Recursion temporarily removes elements from the top until the stack is empty, inserts the new element
// (5), and then rebuilds the stack in reverse order of removal — which is exactly what you need for
// inserting at the bottom!
   
   public static void pushAtBottom(int data, Stack<Integer>s){
     
     // base case :if the stack get empty then push the data and then put the popped element in CharSequence
     if(s.isEmpty()){
       s.push(data);
       return;
     }
     
     
     int top=s.pop();
     
     pushAtBottom(data, s); //recursion call
     
     s.push(top);
   }

    public static void main(String[] args) {

        Stack<Integer>s = new Stack<>();
        s.push(1);
        s.push(2);
        s.push(3);
        s.push(4);
        
        pushAtBottom(5, s);
        
        while(!s.isEmpty()){
          System.out.println(s.peek());
          s.pop();
        }
        
    }
    
    
}
